Function NumberToWords(ByVal MyNumber)
    Dim Units As String
    Dim SubUnits As String
    Dim TempStr As String
    Dim DecimalPlace As Integer
    Dim Count As Integer
    
    ReDim Place(9) As String
    Place(2) = " Thousand "
    Place(3) = " Million "
    Place(4) = " Billion "
    Place(5) = " Trillion "

    ' Handle invalid input
    If IsNumeric(MyNumber) = False Then
        NumberToWords = "Error: Invalid Number"
        Exit Function
    End If
    
    ' Convert MyNumber to string and trim white space.
    MyNumber = Trim(CStr(MyNumber))
    
    ' Handle zero explicitly
    If Val(MyNumber) = 0 Then
        NumberToWords = "Zero"
        Exit Function
    End If

    ' Find position of decimal place.
    DecimalPlace = InStr(MyNumber, ".")
    
    ' Convert SubUnits (decimal part) and set MyNumber to Units (integer part).
    If DecimalPlace > 0 Then
        ' Ensure exactly 2 digits for decimal part
        SubUnits = GetTens(Left(Mid(MyNumber, DecimalPlace + 1) & "00", 2))
        If SubUnits <> "" Then SubUnits = "and " & SubUnits
        MyNumber = Trim(Left(MyNumber, DecimalPlace - 1))
    End If

    ' Process the integer part.
    Count = 1
    Do While MyNumber <> ""
        TempStr = GetHundreds(Right(MyNumber, 3))
        If TempStr <> "" Then Units = TempStr & Place(Count) & Units
        If Len(MyNumber) > 3 Then
            MyNumber = Left(MyNumber, Len(MyNumber) - 3)
        Else
            MyNumber = ""
        End If
        Count = Count + 1
    Loop

    ' Combine integer and decimal parts, trim extra spaces.
    If SubUnits <> "" Then
        NumberToWords = Application.Trim(Units & " " & SubUnits)
    Else
        NumberToWords = Application.Trim(Units)
    End If
End Function

Private Function GetTens(TensText)
    Dim Result As String
    
    ' Ensure TensText is exactly 2 characters
    TensText = Right("00" & Trim(CStr(TensText)), 2)
    Result = ""

    If Val(Left(TensText, 1)) = 1 Then   ' If value between 10-19...
        Select Case Val(TensText)
            Case 10: Result = "Ten"
            Case 11: Result = "Eleven"
            Case 12: Result = "Twelve"
            Case 13: Result = "Thirteen"
            Case 14: Result = "Fourteen"
            Case 15: Result = "Fifteen"
            Case 16: Result = "Sixteen"
            Case 17: Result = "Seventeen"
            Case 18: Result = "Eighteen"
            Case 19: Result = "Nineteen"
            Case Else
        End Select
    Else                                 ' If value between 20-99...
        Select Case Val(Left(TensText, 1))
            Case 2: Result = "Twenty "
            Case 3: Result = "Thirty "
            Case 4: Result = "Forty "
            Case 5: Result = "Fifty "
            Case 6: Result = "Sixty "
            Case 7: Result = "Seventy "
            Case 8: Result = "Eighty "
            Case 9: Result = "Ninety "
            Case Else
        End Select
        Result = Result & GetDigit(Right(TensText, 1))   ' Retrieve ones place.
    End If

    GetTens = Result
End Function

' Keep GetHundreds and GetDigit as they were
Private Function GetHundreds(ByVal MyNumber)
    Dim Result As String

    If Val(MyNumber) = 0 Then Exit Function
    MyNumber = Right("000" & MyNumber, 3)
    
    If Mid(MyNumber, 1, 1) <> "0" Then
        Result = GetDigit(Mid(MyNumber, 1, 1)) & " Hundred "
    End If

    If Mid(MyNumber, 2, 1) <> "0" Then
        Result = Result & GetTens(Mid(MyNumber, 2))
    Else
        Result = Result & GetDigit(Mid(MyNumber, 3))
    End If

    GetHundreds = Result
End Function

Private Function GetDigit(Digit)
    Select Case Val(Digit)
        Case 1: GetDigit = "One"
        Case 2: GetDigit = "Two"
        Case 3: GetDigit = "Three"
        Case 4: GetDigit = "Four"
        Case 5: GetDigit = "Five"
        Case 6: GetDigit = "Six"
        Case 7: GetDigit = "Seven"
        Case 8: GetDigit = "Eight"
        Case 9: GetDigit = "Nine"
        Case Else: GetDigit = ""
    End Select
End Function